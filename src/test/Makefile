# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../lib/test/gtest

# Where to find user code.
USER_DIR = ../
TEST_DIR = unit
OBJECT_DIR = ../UnitTest

# includes in test dir must override includes in user dir
USER_INCLUDE_DIR = $(USER_DIR)
TEST_INCLUDE_DIRS := $(TEST_DIR) \
	$(USER_INCLUDE_DIR)

TEST_FLAGS = $(addprefix -I,$(TEST_INCLUDE_DIRS))

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -DLINUX=1

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS =  multiplayer_unittest
TEST_BINARIES = $(TESTS:%=$(OBJECT_DIR)/%)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TEST_BINARIES)

clean :
	rm -rf $(OBJECT_DIR)

test: $(TESTS:%=test-%)

test-%: $(OBJECT_DIR)/%
	./$<

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJECT_DIR)/gtest-all.o : $(GTEST_SRCS_)
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJECT_DIR)/gtest_main.o : $(GTEST_SRCS_)
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(OBJECT_DIR)/gtest.a : $(OBJECT_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(OBJECT_DIR)/gtest_main.a : $(OBJECT_DIR)/gtest-all.o $(OBJECT_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(OBJECT_DIR)/multiplayer.o : $(USER_DIR)/multiplayer.cpp \
        $(USER_DIR)/multiplayer.hpp \
        $(GTEST_HEADERS)
            
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/multiplayer.cpp -o $@

$(OBJECT_DIR)/multiplayer_unittest.o : $(TEST_DIR)/multiplayer_unittest.cc \
        $(USER_DIR)/multiplayer.hpp \
        $(GTEST_HEADERS)
                     
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TEST_FLAGS) -c $(TEST_DIR)/multiplayer_unittest.cc -o $@

$(OBJECT_DIR)/multiplayer_unittest : $(OBJECT_DIR)/multiplayer.o \
	$(OBJECT_DIR)/multiplayer_unittest.o \
	$(OBJECT_DIR)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

